name: Publish Docker image for ghcr.io

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY_IMAGE: ghcr.io/${{ github.repository_owner }}/misskey-tempura

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      - name: Check out the repo
        uses: actions/checkout@v4.2.2
      - name: Parse version from package.json
        id: parse_version
        run: |
          # package.jsonからバージョンを取得
          VERSION=$(jq -r .version package.json)
          echo "Full Version: $VERSION"

          # 'tempura-X.X.X' の部分を抽出
          TEMPURA_PART=$(echo "$VERSION" | sed -n 's/.*tempura-\([0-9]\+\.[0-9]\+\.[0-9]\+[^[:space:]]*\).*/\1/p')
          if [ -z "$TEMPURA_PART" ]; then
            echo "::warning::No tempura version found in $VERSION, using fallback tags"
            echo "tempura_version=" >> "$GITHUB_OUTPUT"
            echo "has_version=false" >> "$GITHUB_OUTPUT"
          else
            echo "Tempura Version: $TEMPURA_PART"
            echo "tempura_version=$TEMPURA_PART" >> "$GITHUB_OUTPUT"
            echo "has_version=true" >> "$GITHUB_OUTPUT"
          fi

          # -dev が含まれているかでstableかbetaかを判断
          if [[ "$TEMPURA_PART" == *"-dev"* ]]; then
            echo "is_stable=false" >> "$GITHUB_OUTPUT"
          else
            echo "is_stable=true" >> "$GITHUB_OUTPUT"
          fi
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' }}
            type=raw,value=${{ steps.parse_version.outputs.tempura_version }},enable=${{ steps.parse_version.outputs.has_version == 'true' }}
            type=raw,value=${{ steps.parse_version.outputs.tempura_version }}-${{ github.ref_name }},enable=${{ steps.parse_version.outputs.has_version == 'true' && github.ref != 'refs/heads/master' }}
          labels: |
            org.opencontainers.image.title=Misskey Tempura
            org.opencontainers.image.description=Decentralized microblogging platform
            org.opencontainers.image.version=${{ steps.parse_version.outputs.tempura_version }}
            tempura.version=${{ steps.parse_version.outputs.tempura_version }}
            tempura.stable=${{ steps.parse_version.outputs.is_stable }}
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push to GHCR
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: ${{ matrix.platform }}
          provenance: false
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4.2.2
      - name: Parse version from package.json
        id: parse_version
        run: |
          # package.jsonからバージョンを取得
          VERSION=$(jq -r .version package.json)
          echo "Full Version: $VERSION"

          # 'tempura-X.X.X' の部分を抽出
          TEMPURA_PART=$(echo "$VERSION" | sed -n 's/.*tempura-\([0-9]\+\.[0-9]\+\.[0-9]\+[^[:space:]]*\).*/\1/p')
          if [ -z "$TEMPURA_PART" ]; then
            echo "::warning::No tempura version found in $VERSION, using fallback tags"
            echo "tempura_version=" >> "$GITHUB_OUTPUT"
            echo "has_version=false" >> "$GITHUB_OUTPUT"
          else
            echo "Tempura Version: $TEMPURA_PART"
            echo "tempura_version=$TEMPURA_PART" >> "$GITHUB_OUTPUT"
            echo "has_version=true" >> "$GITHUB_OUTPUT"
          fi

          # -dev が含まれているかでstableかbetaかを判断
          if [[ "$TEMPURA_PART" == *"-dev"* ]]; then
            echo "is_stable=false" >> "$GITHUB_OUTPUT"
          else
            echo "is_stable=true" >> "$GITHUB_OUTPUT"
          fi
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' }}
            type=raw,value=${{ steps.parse_version.outputs.tempura_version }},enable=${{ steps.parse_version.outputs.has_version == 'true' }}
            type=raw,value=${{ steps.parse_version.outputs.tempura_version }}-${{ github.ref_name }},enable=${{ steps.parse_version.outputs.has_version == 'true' && github.ref != 'refs/heads/master' }}
          labels: |
            org.opencontainers.image.title=Misskey Tempura
            org.opencontainers.image.description=Decentralized microblogging platform
            org.opencontainers.image.version=${{ steps.parse_version.outputs.tempura_version }}
            tempura.version=${{ steps.parse_version.outputs.tempura_version }}
            tempura.stable=${{ steps.parse_version.outputs.is_stable }}
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
